#labels Featured,Phase-Implementation
= Tutorial básico =

*Classe de teste simples que efetua algumas operações básicas*

{{{
using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Neutrine.iHercules.Connection;
using Neutrine.iHercules.Tests.Entities;

namespace Neutrine.iHercules.Tests
{
    /// <summary>
    /// Teste da classe XmlConnection
    /// </summary>
    [TestClass]
    public class XmlConnectionTest
    {
        private static int id;
        private XmlConnection conn;

        public XmlConnectionTest()
        {
            conn = new XmlConnection("c:/temp/XmlConnectionTest.xml");
        }

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        // Use TestInitialize to run code before running each test 
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //
        #endregion

        [TestMethod]
        public void TestSave()
        {
            conn.Save(CreateClient());

            Assert.IsTrue(conn.FindAll(typeof(Client)).Count > 0);
        }

        [TestMethod]
        public void TestSaveList()
        {
            var clients = new List<object>();

            int max = 50000;

            for (int i = 0; i < max; i++)
            {
                clients.Add(CreateClient());
            }

            conn.SaveList(clients);

            Assert.IsTrue(conn.FindAll(typeof(Client)).Count >= max);
            Assert.IsTrue(conn.FindAll(typeof(Client)).Count >= max);
            Assert.IsTrue(conn.FindAll(typeof(Client)).Count >= max);
        }


        [TestMethod]
        public void TestFindAll()
        {
            Client client = CreateClient();
            conn.Save(client);

            Assert.IsTrue(conn.FindAll(typeof(Client)).Count > 0);
        }

        [TestMethod]
        public void TestFindAllExample()
        {
            Client client = CreateClientRandomId();
            conn.Save(client);

            client.Name = "";

            Assert.IsTrue(conn.FindAll(client).Count == 1);
        }

        [TestMethod]
        public void TestDeleteAll()
        {
            Client client = CreateClient();
            
            conn.Save(client);
            Assert.IsTrue(conn.FindAll(typeof(Client)).Count > 0);

            conn.DeleteAll();
            Assert.IsTrue(conn.FindAll(typeof(Client)).Count == 0);
        }

        private Client CreateClient()
        {
            return new Client() { Id = ++id, Name = "Luiz" };
        }

        private Client CreateClientRandomId()
        {
            int id = DateTime.Now.Millisecond;
            return new Client() { Id = id, Name = "Luiz"};
        }
    }
}

}}}